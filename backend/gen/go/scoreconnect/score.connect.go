// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: score.proto

package scoreconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	score "score-splitter/backend/gen/go/score"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ScoreServiceName is the fully-qualified name of the ScoreService service.
	ScoreServiceName = "score.ScoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScoreServiceUploadScoreProcedure is the fully-qualified name of the ScoreService's UploadScore
	// RPC.
	ScoreServiceUploadScoreProcedure = "/score.ScoreService/UploadScore"
)

// ScoreServiceClient is a client for the score.ScoreService service.
type ScoreServiceClient interface {
	UploadScore(context.Context, *connect.Request[score.UploadScoreRequest]) (*connect.Response[score.UploadScoreResponse], error)
}

// NewScoreServiceClient constructs a client for the score.ScoreService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ScoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	scoreServiceMethods := score.File_score_proto.Services().ByName("ScoreService").Methods()
	return &scoreServiceClient{
		uploadScore: connect.NewClient[score.UploadScoreRequest, score.UploadScoreResponse](
			httpClient,
			baseURL+ScoreServiceUploadScoreProcedure,
			connect.WithSchema(scoreServiceMethods.ByName("UploadScore")),
			connect.WithClientOptions(opts...),
		),
	}
}

// scoreServiceClient implements ScoreServiceClient.
type scoreServiceClient struct {
	uploadScore *connect.Client[score.UploadScoreRequest, score.UploadScoreResponse]
}

// UploadScore calls score.ScoreService.UploadScore.
func (c *scoreServiceClient) UploadScore(ctx context.Context, req *connect.Request[score.UploadScoreRequest]) (*connect.Response[score.UploadScoreResponse], error) {
	return c.uploadScore.CallUnary(ctx, req)
}

// ScoreServiceHandler is an implementation of the score.ScoreService service.
type ScoreServiceHandler interface {
	UploadScore(context.Context, *connect.Request[score.UploadScoreRequest]) (*connect.Response[score.UploadScoreResponse], error)
}

// NewScoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScoreServiceHandler(svc ScoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	scoreServiceMethods := score.File_score_proto.Services().ByName("ScoreService").Methods()
	scoreServiceUploadScoreHandler := connect.NewUnaryHandler(
		ScoreServiceUploadScoreProcedure,
		svc.UploadScore,
		connect.WithSchema(scoreServiceMethods.ByName("UploadScore")),
		connect.WithHandlerOptions(opts...),
	)
	return "/score.ScoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ScoreServiceUploadScoreProcedure:
			scoreServiceUploadScoreHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedScoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedScoreServiceHandler struct{}

func (UnimplementedScoreServiceHandler) UploadScore(context.Context, *connect.Request[score.UploadScoreRequest]) (*connect.Response[score.UploadScoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("score.ScoreService.UploadScore is not implemented"))
}
